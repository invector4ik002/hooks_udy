/**
 * @function [<createContext>] - React компонент для создания контекста что то типа Redux 
 * @function [<useState>] - Хук состаяния
 * export const CurrentUserContext = createContext([{}, () => {}]) - создаем контекст, экспортируем
 * createContext([{текущее}, () => {меняющееСостояние}]) - несет в себе состояние 
 * export const CurrentUserProvider = ({children}) => {} - функция с аргументом который передаст 
 * обернутым доступ к const [state, setState] = useState({})
 * isLoading: false, - загружаем юзера или нет, загружаем или закончили
 * isLoggedIn: null, - залогинин юзер лил нет 
 * currentUser: null - наш респонс котрый мы получили от бэкенда
 * <CurrentUserContext.Provider value={[state, setState]}> - элемент jsx в который мы сможем обернуть наши компоненты
 * несет в себе value={[state, setState]} состояние текущее и состояние его меняющее
 */
// вариант 1 ----------------------------------------------------------------------------------
// import React, {createContext, useState} from 'react';

// export const CurrentUserContext = createContext([{}, () => {}])

// export const CurrentUserProvider = ({children}) => {
//    const [state, setState] = useState({
//       isLoading: false,
//       isLoggedIn: null,
//       currentUser: null
//    })
//    return (
//       <CurrentUserContext.Provider value={[state, setState]}>
//          {children}
//       </CurrentUserContext.Provider>
//    )
// }
// вариант 2 useReduser -------------------------------------------------------------------------
/**
 * Object [<initialState>] -*37 состояние по умолчанию
 * @function [<reduser>] -44* иммутабильная функция обновляющая состояние по action
 * newState -45* обновляет состояние каждый раз при вызове reduser не мутируя предыдущие
 */
import React, {createContext, useReducer} from 'react'; 

const initialState = {
   isLoading: false,
   isLoggedIn: null,
   currentUser: null
}
const reduser = (state, action) => {
   switch (action.type) {
   case 'LOADING':
      return {
         ...state,
         isLoading: true
      }
   case 'SET_AUTHORIZED':
      return {
         ...state,
         isLoading: false,
         isLoggedIn: true,
         currentUser: action.payload
      }
   case 'SET_UNAUTHORIZED':
      return {
         ...state,
         isLoggedIn: false,
      }
   default:
      return state  
   }   
}

export const CurrentUserContext = createContext()

export const CurrentUserProvider = ({children}) => {
   const value = useReducer(reduser, initialState)
   console.log('ERROR', value)
   return (
      <CurrentUserContext.Provider value={value}>
         {children}
      </CurrentUserContext.Provider>
   )
}

// const newState = reduser(initialState, {type:'LOGOUT'})