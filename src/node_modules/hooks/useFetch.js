/**
 * Кастомный хук на отправление url.
 * Внутри кастомных хуков применяются и хуки из библиотеки react.
 */
import {useState, useEffect, useCallback} from 'react';
/**
 * Библиотека для обмена с данными с сервером.
 * https://www.npmjs.com/package/axios
 */
import axios from 'axios';
/**
 * useLocalStorage - хук для получения токина
 */
import useLocalStorage from 'hooks/useLocalStorage'

export default (url) => {
   const baseUrl ='https://conduit.productionready.io/api'
   const [isLoading, setIsLoading] = useState(false)
   const [response, setResponse] = useState(null)
   const [error, setError] = useState(null)
   const [options, setOptions] = useState({})

   const [token] = useLocalStorage('token')
   console.log('useFetch.js: token', token)
/**
 * При получении в options данных совершает включение useEffect с уже полученными данными в options
 * отправляя setIsLoading(true) меняя const [isLoading, setIsLoading] = useState(false)
 * @param {object} options - обьект данныйх пользователя.
 * @function [<useEffect>] - сп.функция реакта срабатывает один раз и получает зависимость 
 * [isLoading, url, options]
 */
   const doFetch = useCallback((options={}) => {
      setOptions(options)
      setIsLoading(true)
   }, []) 

   useEffect (() => {
      const requestOptions = {
         ...options,
         ...{
            headers: {
               authorization: token ? `Token ${token} ` : ''
            }
         }
      }

      if(!isLoading) {
         return
      }

      axios(baseUrl + url, requestOptions)
      .then((res) => {
          console.log('success', res)
          setIsLoading(false)
          setResponse(res.data)
      })
      .catch((error) => {
          console.log('error', error)
          setIsLoading(false)
          setError(error.response.data)
      })
   }, [isLoading, url, options, token])
   return [{isLoading, response, error}, doFetch]   
}