import React,{useEffect, useState, useContext} from 'react';
import { Redirect } from 'react-router-dom';
/**
 * Естественно сама форма 
 */
import {ArticleForm} from 'components/articleForm';
/**
 * Используем 2 раза для получения формы первого варианта
 * и для редактирования 
 */
import useFetch from 'hooks/useFetch';
import {CurrentUserContext} from 'context/currentUser';
// import { useEffect } from 'react';
/**
 * Компонент редактирования формы поста
 * 
 */
export const EditArticle = ({match}) => {
  const slug = match.params.slug
  const [CurrentUserState] = useContext(CurrentUserContext)
  // console.log('editArticle/index.js > props match:', match)
  const apiUrl = `/articles/${slug}`
   //------------------------------------------------------------------------------------------------------------
  /**
   * response: fetchArticleResponse присвоение локальной переменной - 'получить ответ по статье'
   * doFetchArticle - сделать выборку статьи
   */
   const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl)
   /**
    * response: updateArticleResponse - обновить статью ответ
    * error: updateArticleError - ошибка: обновить статью ошибка
    * doUpdateArticle - сделать обновление статьи
    */
   const [{response: updateArticleResponse, error: updateArticleError}, doUpdateArticle] = useFetch(apiUrl)
  //------------------------------------------------------------------------------------------------------------
   const [initialValues, setInitialValues] = useState(null)
   const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)

   const handleSubmit = (article) => {
      // console.log('editArticle/index.js > props article:',article)
      doUpdateArticle({
        method: 'put',
         data: {
            article
         }
      })
   }
/**
 * фечим по умолчанию
 */
   useEffect(() => {
      doFetchArticle()
   }, [doFetchArticle])

   useEffect(() => {
      if(!fetchArticleResponse) {
         return
      }
      setInitialValues({
         title: fetchArticleResponse.article.title,
         description: fetchArticleResponse.article.description,
         body: fetchArticleResponse.article.body,
         tagList: fetchArticleResponse.article.tagList
      })
   }, [fetchArticleResponse])
   
   useEffect(() => {
      if (!updateArticleResponse) {
         return
      }
      setIsSuccessfullSubmit(true)
   }, [updateArticleResponse])
   
   if (CurrentUserState.isLoggedIn === false) {
      return <Redirect to='/'/>
   }

   if (isSuccessfullSubmit) {
      return <Redirect to={`/articles/${slug}`}/>
   }

   return (
      <ArticleForm
         onSubmit={handleSubmit}
         errors={(updateArticleError && updateArticleError.errors) || {}}
         initialValues={initialValues}
      />
   )
}