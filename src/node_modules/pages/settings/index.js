import React, {useContext, useState, useEffect} from 'react';
import { Redirect } from 'react-router-dom';

import useFetch from 'hooks/useFetch';
import { CurrentUserContext } from 'context/currentUser';
import BackendErrorMessages from 'components/backendErrorMessages';
import useLocalStorage from 'hooks/useLocalStorage';
/**
 * 
 */
const Settings = () => {
   const [currentUserState, dispatch] = useContext(CurrentUserContext);
   const apiUrl = '/user';
   const [{response, error}, doFetch] = useFetch(apiUrl);
   const [image, setImage] = useState('');
   const [username, setUsername] = useState('');
   const [bio, setBio] = useState('');
   const [email, setEmail] = useState('');
   const [password, setPassword] = useState('');
   const [,setToken] = useLocalStorage('token');
   const [isSuccessfullLogout, setIsSuccessfullLogout] = useState(false);
   console.log('currentUserState:', currentUserState);
/**
* отправляем данные с этого page
* doFetch специальный хук для отправки получения данных с сервера
* event.preventDefault(); отключение действий кнопки формы по умолчанию
*/
   const handleSubmit = (event) => {
      event.preventDefault();

      doFetch({
         mathod: 'put',
         data: {
            user: {
               ...currentUserState.currentUser,
               image,
               username,
               bio,
               email,
               password,
            }
         }
      })
   };
/**
 * event.preventDefault(); отключение действий кнопки формы по умолчанию
 * setToken(''); затирка токена на пустую строку
 * dispatch({type: 'LOGOUT'}); диспатчим перезатирание стейта точнее одного поля isLoggedIn: на false
 * setIsSuccessfullLogout(true); строим логику для редиректа
 */
   const logout = (event) => {
      event.preventDefault();
      setToken('');
      dispatch({type: 'LOGOUT'});
      setIsSuccessfullLogout(true); 
   };

   useEffect(() => {
      if(!currentUserState.currentUser) {
         return
      };

      setImage(currentUserState.currentUser.image);
      setUsername(currentUserState.currentUser.username);
      setBio(currentUserState.currentUser.bio);
      setEmail(currentUserState.currentUser.email);
   },[currentUserState.currentUser]);

   useEffect(() => {
      if(!response) {
         return
      };
      dispatch({type: 'SET_AUTHORIZED', payload: response.user})
   },[response, dispatch]);

   if(isSuccessfullLogout) {
      return <Redirect to='/'/>
   }

   return (
      <div className='settings-page'>
         <div className='container page'>
            <div className='row'>
             <div className='col-md-6 offset-md-3 col-xs-12'>
               <h1 className='text-xs-center'>Your settings</h1>
               {error && <BackendErrorMessages backendErrors={error.errors}/>}
               <form onSubmit={handleSubmit}>
                  <fieldset>
                     <fieldset className='form-group'>
                        <input 
                           className='form-control form-control-lg'
                           type='text' 
                           placeholder='URL of profile picture'
                           value={image}
                           onChange={(event) => setImage(event.target.value)}
                        />
                     </fieldset>
                     <fieldset className='form-group'>
                        <input 
                           className='form-control form-control-lg'
                           type='text' 
                           placeholder='Username'
                           value={username}
                           onChange={(event) => setUsername(event.target.value)}
                        />
                     </fieldset>
                     <fieldset className='form-group'>
                        <textarea 
                           className='form-control form-control-lg' 
                           rows='8' 
                           placeholder='Short bio'
                           value={bio}
                           onChange={(event) => setBio(event.target.value)}
                        />
                     </fieldset>
                     <fieldset className='form-group'>
                        <input 
                           className='form-control form-control-lg'
                           type='text' 
                           placeholder='Email'
                           value={email}
                           onChange={(event) => setEmail(event.target.value)}
                        />
                     </fieldset>
                     <fieldset className='form-group'>
                        <input 
                           className='form-control form-control-lg'
                           type='password' 
                           placeholder='Password'
                           value={password}
                           onChange={(value) => setPassword(value.target.value)}
                        />
                     </fieldset>
                     <button className='btn btn-lg btn-primary pull-xs-right' type='submit'>
                        Update settings
                     </button>
                  </fieldset>
               </form>
               <hr/>
               <button 
                  className='btn btn-outline-danger' 
                  onClick={logout}
               >
                  Or click here to logout
               </button>
             </div>
            </div>
         </div>
      </div>
   )
}
export default Settings;