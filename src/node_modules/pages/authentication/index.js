/**
 * @function [<useContext>] - 
 */
import React, {useState, useEffect, useContext} from 'react';
import {Link, Redirect} from 'react-router-dom';

import useFetch from 'hooks/useFetch';
/**
 * кастомный хук [<useLocalStorage>] - получениe отправки 'token'
 * применяем для переиспользования и сокращении записи при работе с 'token'
 */
import useLocalStorage from 'hooks/useLocalStorage';//кастомный хук - import
import {CurrentUserContext} from 'context/currentUser';
import BackendErrorMessages from 'components/backendErrorMessages'
// import {Pagination} from 'components/pagination';
/**
 * Верстка логина, форма два input и submit. 
 * два стейта для хранения данных [<useState('')>]  
 * @function [<Authentication>] - верстка компонента логина 
 * @method const [email, setEmail] = useState('')
 * @function [<useState('')>] default пустая строка.
 * email - value инпута 
 * setEmail - сеттер меняющий значение стейта
 */
const Authentication = (props) => { 
    // логика сравнения на каком роуте находимся. true в console это значит что мы на странице логина
    const isLogin = props.match.path === '/login'
    
    //Если на /login тогда 'Sign In' . переменные те что ниже завяаны на логитке. Подставляя их в верстку {переменная}
    //Получаем денамическое обнавление  
    const pageTitle = isLogin ? 'Sign In' : 'Sign Up' 
    const descriptionLink = isLogin ? '/register' : '/login'
    const descriptionText = isLogin ? 'Need an account?' : 'Have an account?'
    const apiUrl = isLogin ? '/users/login' : '/users'

    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [username, setUsername] = useState('')
    const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState(false)
    //dispatch - специальная функция которая диспатчит action
    const [, dispatch] = useContext(CurrentUserContext)
    const [, setToken] = useLocalStorage('token')//кастомный хук
    const [{response, isLoading, error}, doFetch] = useFetch(apiUrl)//кастомный хук 

    // console.log('currentUserState', currentUserState)
    // console.log('token', token)
    console.log('( work:', isLogin, ')', apiUrl)
    // console.log('work', props.match.path)
    /**
     * Фунуция для отключения дефолтного поведения кнопки формы отправки данных,отключение.
     * @function [<handleSubmit>] - принемает событие.
     * @param {event} - событие.
     * event.preventDefault() - отключение реакции на событие.
     * const user - логическая переменная зависимость от нахождения в роутере 
     * формирует обьект для отправки на сервер.
     */
    const handleSubmit = (event) => {
        event.preventDefault()
        const user = isLogin ? {email, password} : {email, password, username}
        doFetch({
            method: 'post',
            data: {
                user
            }
        })
    }
    // При положительном response включаем setIsSuccessFullSubmit(true)
    // Проверка на успешное сохранение юзера при true переход на home 
    // Предворительно создав состояние const [isSuccessFullSubmit, setIsSuccessFullSubmit] = useState(false)
    // Redirect спец.функция библиотеки 'react-router-dom'
    useEffect(() => {
        if(!response) {
           return
        }
        setToken(response.user.token) 
        setIsSuccessFullSubmit(true)
        dispatch ({
            type: 'SET_AUTHORIZED',
            payload: response.user
        })
    }, [response, setToken, dispatch])

    if(isSuccessFullSubmit) {
        return <Redirect to='/'/>
    }
    return (
        <div className='auth-page'>
           <div className='container page'>
               <div className='row'>
                    <div className='col-md-6 offset-md-3 col-xs-12'>
                        <h1 className='text-xs-center'>{pageTitle}</h1>
                        <p className='text-xs-center'>
                            <Link to={descriptionLink}>{descriptionText}</Link>
                        </p>
                        <form 
                            /**
                             * @function [<onSubmit>] - событе отправок из формы
                             * @function [<handleSubmit>] - перехват-отключение 
                             */
                            onSubmit={handleSubmit}
                        >
                            {error && <BackendErrorMessages backendErrors={error.errors}/>} 
                            <fieldset> 
                                {!isLogin && (
                                <fieldset className='form-group'>
                                    <input 
                                        type='text' 
                                        className='form-control form-control-lg' 
                                        placeholder='Username'
                                        value={username}
                                        /**
                                         * @function [<onChange>] - событие input(username)
                                         * @param {string} - текущее значение input
                                         * setUsername(event.target.value) - текущее значение input в стейте
                                         */
                                        onChange={event => setUsername(event.target.value)}
                                    />
                                </fieldset>
                                )}
                                <fieldset className='form-group'>
                                    <input 
                                        type='email' 
                                        className='form-control form-control-lg' 
                                        placeholder='Email'
                                        value={email}
                                        /**
                                         * @function [<onChange>] - событие input(email)
                                         * @param {string} - текущее значение input
                                         * setEmail(event.target.value) - текущее значение input в стейте
                                         */
                                        onChange={event => setEmail(event.target.value)}
                                    />
                                </fieldset>
                                <fieldset className='form-group'>
                                    <input 
                                        type='password' 
                                        className='form-control form-control-lg' 
                                        placeholder='Password'
                                        value={password}
                                        /**
                                         * @function [<onChange>] - событие input(password)
                                         * @param {string} - текущее значение input
                                         * setPassword(event.target.value) - текущее значение input в стейте
                                         */
                                        onChange={event => setPassword(event.target.value)}
                                    />
                                </fieldset>
                                <button 
                                    className='btn btn-lg btn-primary pull-xs-right' 
                                    type='submit'
                                    disabled={isLoading}>{pageTitle}
                                </button>
                            </fieldset>
                        </form>
                    </div>
               </div>
           </div>
        </div>
    )
}
 export default Authentication;